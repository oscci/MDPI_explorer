[
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Added internal function clean_names() to homogenize editors and authors names to the same standard for comparison reason. clean_names() incorporated to guest_editor_info() for name cleaning purposes, replacing previous code with similar purpose on guest_editor_info()\nFixed bug ignoring guest editor without profile link on guest_editor_info()\n\nFixed code interpreting time of last submission on guest_editor_info()\nguest_editor_info() now outputs a guest editor paper count for each special issue"
  },
  {
    "objectID": "changelog.html#v.-0.0.1.4",
    "href": "changelog.html#v.-0.0.1.4",
    "title": "Changelog",
    "section": "",
    "text": "Added internal function clean_names() to homogenize editors and authors names to the same standard for comparison reason. clean_names() incorporated to guest_editor_info() for name cleaning purposes, replacing previous code with similar purpose on guest_editor_info()\nFixed bug ignoring guest editor without profile link on guest_editor_info()\n\nFixed code interpreting time of last submission on guest_editor_info()\nguest_editor_info() now outputs a guest editor paper count for each special issue"
  },
  {
    "objectID": "changelog.html#v.-0.0.1.3-10-jan-23",
    "href": "changelog.html#v.-0.0.1.3-10-jan-23",
    "title": "Changelog",
    "section": "v. 0.0.1.3 (10-Jan-23)",
    "text": "v. 0.0.1.3 (10-Jan-23)\nguest_editor() no longer part of MDPIexploreR. Use special_issue_find() and guest_editor_info() instead\nCleared errors and warnings for R CMD check\narticles_info() replaced by article_info().\narticle_info() transform editorial data to lowercase to facilitate the use of gsub()"
  },
  {
    "objectID": "changelog.html#v.-0.0.1.2-6-jan-23",
    "href": "changelog.html#v.-0.0.1.2-6-jan-23",
    "title": "Changelog",
    "section": "v. 0.0.1.2 (6-Jan-23)",
    "text": "v. 0.0.1.2 (6-Jan-23)\nAdding functions special_issue_find() & guest_editor_info() to deprecate guest_editor() and make the workflow more flexible."
  },
  {
    "objectID": "changelog.html#v.-0.0.1.1-4-jan-23",
    "href": "changelog.html#v.-0.0.1.1-4-jan-23",
    "title": "Changelog",
    "section": "v. 0.0.1.1 (4-Jan-23)",
    "text": "v. 0.0.1.1 (4-Jan-23)\nguest_editor() now selects two first words of guest editors and authors names for comparison to account for discrepancies in number of surnames between guest editors and paper authors. (e.g. guest editor name = Dr. Perico Palotes Fernández, but author name is just Perico Palotes. ).\nguest_editor() d_over_deadline output column now considers latest article submission date to a special issue instead of latest acceptance time.\nguest_editor() Assoc. Prof. guest editors are now picked by the function too\nguest_editor() Ignores papers of type “Editorial”"
  },
  {
    "objectID": "changelog.html#v.-0.0.0.1-initial",
    "href": "changelog.html#v.-0.0.0.1-initial",
    "title": "Changelog",
    "section": "v. 0.0.0.1 (Initial)",
    "text": "v. 0.0.0.1 (Initial)"
  },
  {
    "objectID": "index.html#background",
    "href": "index.html#background",
    "title": "Get started! A guide to MDPIexploreR",
    "section": "Background",
    "text": "Background\nEver changing scientific publishing strategies shape academic communications.\nTo date, MDPI is the largest publisher of Open Access articles in the world and top-3 overall publisher (Right after Elsevier and SpringerNature). “The Strain on Scientific Publishing” highlights them as a frequent outlier for several metrics, but also as one of the most transparent major publishers out there.\nThis R package intends to help users to obtain factual data from MDPI’s journals, special issues and articles directly from their website (via web-scraping). Detailed information on functions and datasets can be found in the Reference section.\nThe following section aims to provide a brief and approachable tutorial introducing users to the functionalities of the R package MDPIexploreR."
  },
  {
    "objectID": "index.html#installing-mdpiexplorer",
    "href": "index.html#installing-mdpiexplorer",
    "title": "Get started! A guide to MDPIexploreR",
    "section": "Installing MDPIexploreR",
    "text": "Installing MDPIexploreR\n\ndevtools::install_github(\"pgomba/MDPI_explorer\")\nlibrary(MDPIexploreR)"
  },
  {
    "objectID": "index.html#exploring-journal-articles",
    "href": "index.html#exploring-journal-articles",
    "title": "Get started! A guide to MDPIexploreR",
    "section": "Exploring journal articles",
    "text": "Exploring journal articles\nObtaining a list of articles from a journal is easy thanks to the function article_find(). This function returns a vector of articles URLs. To do so, we just need to submit the journal code as a text string.\n\nurls&lt;-article_find(\"agriculture\")\n\nprint(paste(\"Articles found:\", length(urls)))\n\n[1] \"Articles found: 7328\"\n\n\nThe journal code name usually coincides with the journal title, but this is not always the case if the journal name is too long. To find the code name for your journal of interest check the dataset MDPI_journals, included in the package:\n\nMDPIexploreR::MDPI_journals|&gt;\n  head(10)\n\n                               name            code\n1                         Acoustics       acoustics\n2                         Actuators       actuators\n3           Administrative Sciences          admsci\n4                       Adolescents     adolescents\n5  Advances in Respiratory Medicine             arm\n6                       Aerobiology     aerobiology\n7                         Aerospace       aerospace\n8                       Agriculture     agriculture\n9                   AgriEngineering agriengineering\n10                    Agrochemicals   agrochemicals\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote the code for the journal “Acoustics” matches the title of the journal, but the code for “Advances in Respiratory Medicine” is just the text string “arm”.\n\n\nThe resulting vector from using article_find() (or any vector with scientific papers URLs), can then be combined with the function article_info(). This function will, for every article in the list, obtain receiving and accepting dates (to calculate turnaround times), obtain article type (e.g. editorial, review) and find out if it belongs to a special issue. Lets find information on 10 random articles from the journal “Covid”, leaving 2 seconds between scraping iterations.\n\n# Show article type, turnaround time and if article is included in special issue\ninfo|&gt;\n  dplyr::mutate(doi=gsub(\"https://www.mdpi.com/\",\"\",i))|&gt; #To reduce output width\n  dplyr::select(doi,article_type,tat,issue_type)\n\n                  doi      article_type      tat    issue_type\n1  2673-8112/3/12/121            Review  40 days            No\n2    2673-8112/1/3/52      Brief Report 122 days            No\n3  2673-8112/2/12/120           Article  73 days            No\n4    2673-8112/2/9/94 Systematic Review  46 days Special Issue\n5  2673-8112/3/11/112      Brief Report  78 days            No\n6    2673-8112/3/6/63      Brief Report  52 days            No\n7  2673-8112/3/11/115           Article  10 days            No\n8    2673-8112/2/2/15           Article 125 days            No\n9    2673-8112/3/9/95      Brief Report  35 days         Topic\n10   2673-8112/2/7/63           Article  42 days            No\n\n\nBy default, sleep is two seconds. Reducing this number might cause the server to kick you out, specially when scraping large numbers of articles. sample_size, if blank, will iterate through the whole vector of articles.\n\n\n\n\n\n\nImportant\n\n\n\nA stable internet connexion is recommended, specially for web scraping large numbers of papers\n\n\n\n\n\n\n\n\nTip\n\n\n\nWeb scraping large amounts of URLs can be time consuming (2 seconds per paper, depending on delay) and many things can go wrong during the process (problematic URLs, being kicked out of the server…). My advice is to split large URL vectors in smaller ones."
  },
  {
    "objectID": "index.html#plotting-article_info",
    "href": "index.html#plotting-article_info",
    "title": "Get started! A guide to MDPIexploreR",
    "section": "Plotting article_info()",
    "text": "Plotting article_info()\nMDPIexploreR provides with three functions to plot the results from article_info(). Lets load one of the data frames provided by the package first:\n\nagriculture_info&lt;-MDPIexploreR::agriculture\n\nnrow(agriculture_info)\n\n[1] 7160\n\n\nsummary_graph() plots publications over time. The title of the journal must be provided:\n\nsummary_graph(agriculture_info, journal=\"Agriculture\")\n\n\naverage_graph() plots average monthly turnaround times for the time period included in the dataset:\n\naverage_graph(agriculture_info, journal=\"Agriculture\")\n\n\nissues_graph() classifies articles depending on where they were published, including special issues\n\nissues_graph(agriculture_info, journal=\"Agriculture\")\n\n\nLastly, types_graphs() plots a classification of articles depending on their type (editorial, review, etc)\n\ntypes_graph(agriculture_info, journal=\"Agriculture\")\n\n\nAll plots can be saved via ggsave()"
  },
  {
    "objectID": "index.html#exploring-special-issues-and-guest-editors",
    "href": "index.html#exploring-special-issues-and-guest-editors",
    "title": "Get started! A guide to MDPIexploreR",
    "section": "Exploring special issues and guest editors",
    "text": "Exploring special issues and guest editors\nSimilar to article_find(), the function special_issue_find() outputs a vector with all special issues available in the target journal. By default, it retrieves all CLOSED special issues, but this can be adjusted with the parameter type.\n\n# Creates a vector with all CLOSED special issues from the journal Covid\nURLs&lt;-special_issue_find(\"covid\")\nprint(paste(\"Closed Special Issues:\",length(URLs)))\n\n[1] \"Closed Special Issues: 6\"\n\n# Creates a vector with all special issues from the journal Covid\nURLs&lt;-special_issue_find(\"covid\", type=\"all\")\nprint(paste(\"All Special Issues:\",length(URLs)))\n\n[1] \"All Special Issues: 11\"\n\n# Creates a vector with all special issues from the journal Covid\nURLs&lt;-special_issue_find(\"covid\", type=\"open\")\nprint(paste(\"Open Special Issues:\",length(URLs)))\n\n[1] \"Open Special Issues: 5\"\n\n\nguest_editor_info() uses then the vector produced by special_issue_find() to look for proportion of articles in special issues where the guest editors were involved and differences between special issue closing time and last article submitted. This function is inspired by MA Oviedo-García work on MDPI’s special issues. Similar to article_info(), it allows to select only a sample of special issues and set up a delay between scraping iterations.\n\nURLs&lt;-special_issue_find(\"covid\")\n\n# Extract data from all URLs, iterating every 3 seconds\nguest_editor_info (URLs, sleep=3)\n\n# Extract data from 2 URLs, iterating every 2 seconds (default)\nguest_editor_info (URLs, sample_size=2)"
  },
  {
    "objectID": "reference.html",
    "href": "reference.html",
    "title": "Reference (wip)",
    "section": "",
    "text": "article_find(): Returns a vector containing URLs for all scientific articles in a journal. Input: A text string with journal title or code. See dataset MDPI_journals for reference.\narticle_info(): Returns a data frame with editorial times, type and presence in special issue for each submitted article. Input: A vector with articles URLS. see article_find(). Optional: sleep (Number of seconds between scraping iterations. Default is 2 seconds) and sample_size (Size of the sample of articles to take from the vector. Leave blank to select all).\naverage_graph()\nclean_names()\nguest_editor_info()\nissues_graph()\nspecial_issue_find()\nsummary_graph()\ntype_graph()\n\n\nagriculture\nhorticulturae\nMDPI_journals"
  },
  {
    "objectID": "reference.html#functions-a-z",
    "href": "reference.html#functions-a-z",
    "title": "Reference (wip)",
    "section": "",
    "text": "article_find(): Returns a vector containing URLs for all scientific articles in a journal. Input: A text string with journal title or code. See dataset MDPI_journals for reference.\narticle_info(): Returns a data frame with editorial times, type and presence in special issue for each submitted article. Input: A vector with articles URLS. see article_find(). Optional: sleep (Number of seconds between scraping iterations. Default is 2 seconds) and sample_size (Size of the sample of articles to take from the vector. Leave blank to select all).\naverage_graph()\nclean_names()\nguest_editor_info()\nissues_graph()\nspecial_issue_find()\nsummary_graph()\ntype_graph()\n\n\nagriculture\nhorticulturae\nMDPI_journals"
  }
]